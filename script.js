// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentSession = null;
let currentExpert = null;
let sessions = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    console.log('üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏ –∏–∑ localStorage (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏)
    try {
        const stored = localStorage.getItem('expertSessions');
        sessions = stored ? JSON.parse(stored) : {};
    } catch (error) {
        sessions = {};
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const urlParams = new URLSearchParams(window.location.search);
    const sessionCode = urlParams.get('session');
    const sessionData = urlParams.get('data');
    
    console.log('üîó –ü–∞—Ä–∞–º–µ—Ç—Ä—ã URL:', { sessionCode, sessionData });
    
    if (sessionCode && sessionData) {
        // –†–µ–∂–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∞ - —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ URL
        console.log('üë§ –†–µ–∂–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∞ - —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ URL');
        createSessionFromURL(sessionCode, sessionData);
        showExpertPage();
        document.getElementById('sessionCode').value = sessionCode;
        
    } else if (sessionCode) {
        // –†–µ–∂–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∞, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ URL - –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage
        console.log('üë§ –†–µ–∂–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∞ - –∏—â–µ–º –≤ localStorage');
        showExpertPage();
        document.getElementById('sessionCode').value = sessionCode;
        
    } else {
        // –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞
        console.log('üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞');
        showAdminPage();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ URL (–¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤)
function createSessionFromURL(sessionCode, sessionData) {
    try {
        const decodedData = decodeURIComponent(sessionData);
        const session = JSON.parse(decodedData);
        
        sessions[sessionCode] = session;
        localStorage.setItem('expertSessions', JSON.stringify(sessions));
        
        console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ URL:', session);
        return session;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏–∑ URL:', error);
        return null;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (–∞–¥–º–∏–Ω)
function createSession() {
    console.log('üéØ –°–û–ó–î–ê–ù–ò–ï –°–ï–°–°–ò–ò');
    
    const sessionName = document.getElementById('sessionName').value || '–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è';
    const expertsCount = parseInt(document.getElementById('expertsCount').value) || 5;
    const objectsCount = parseInt(document.getElementById('objectsCount').value) || 4;
    const method = document.getElementById('evaluationMethod').value;
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ —Å–µ—Å—Å–∏–∏
    const sessionCode = generateSessionCode();
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    currentSession = {
        id: sessionCode,
        name: sessionName,
        expertsCount: expertsCount,
        objectsCount: objectsCount,
        method: method,
        experts: [],
        votes: {},
        status: 'inviting',
        createdAt: new Date().toISOString(),
        objects: []
    };
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã
    for (let i = 1; i <= objectsCount; i++) {
        currentSession.objects.push(`–û–±—ä–µ–∫—Ç ${i}`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    sessions[sessionCode] = currentSession;
    localStorage.setItem('expertSessions', JSON.stringify(sessions));
    
    console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', currentSession);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º
    showInvitationStep();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —à–∞–≥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
function showInvitationStep() {
    if (!currentSession) {
        alert('–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞');
        return;
    }
    
    document.getElementById('currentSessionName').textContent = currentSession.name;
    document.getElementById('sessionCodeDisplay').textContent = currentSession.id;
    document.getElementById('totalExperts').textContent = currentSession.expertsCount;
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –£–ú–ù–û–ô —Å—Å—ã–ª–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏–∏ –≤ URL
    const sessionData = encodeURIComponent(JSON.stringify(currentSession));
    const invitationLink = `${window.location.origin}${window.location.pathname}?session=${currentSession.id}&data=${sessionData}`;
    
    document.getElementById('invitationLink').value = invitationLink;
    
    console.log('üîó –£–º–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', invitationLink);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
    document.getElementById('qrcode').innerHTML = '';
    new QRCode(document.getElementById('qrcode'), {
        text: invitationLink,
        width: 200,
        height: 200,
        colorDark: "#000000",
        colorLight: "#ffffff",
        correctLevel: QRCode.CorrectLevel.H
    });
    
    nextStep(2);
    updateExpertsList();
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ –∫ —Å–µ—Å—Å–∏–∏
function joinSession() {
    const expertName = document.getElementById('expertName').value.trim();
    let sessionCode = document.getElementById('sessionCode').value.trim().toUpperCase();
    
    // –ï—Å–ª–∏ –∫–æ–¥ –ø—É—Å—Ç–æ–π, –±–µ—Ä–µ–º –∏–∑ URL
    if (!sessionCode) {
        const urlParams = new URLSearchParams(window.location.search);
        sessionCode = urlParams.get('session');
        if (sessionCode) {
            document.getElementById('sessionCode').value = sessionCode;
        }
    }
    
    if (!expertName) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
        return;
    }
    
    if (!sessionCode) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–µ—Å—Å–∏–∏');
        return;
    }
    
    console.log('üîç –ò—â–µ–º —Å–µ—Å—Å–∏—é:', sessionCode);
    console.log('üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', Object.keys(sessions));
    
    // –ò—â–µ–º —Å–µ—Å—Å–∏—é –≤ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
    let session = sessions[sessionCode];
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ localStorage, –ø—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (!session) {
        const urlParams = new URLSearchParams(window.location.search);
        const sessionData = urlParams.get('data');
        if (sessionData) {
            session = createSessionFromURL(sessionCode, sessionData);
        }
    }
    
    if (!session) {
        console.error('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ');
        alert('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n\n' +
              '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
              '‚Ä¢ –°–µ—Å—Å–∏—è –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –¥—Ä—É–≥–æ–º –±—Ä–∞—É–∑–µ—Ä–µ\n' +
              '‚Ä¢ –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã\n' +
              '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Å QR-–∫–æ–¥–∞ (–æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ)');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ —ç–∫—Å–ø–µ—Ä—Ç
    const existingExpert = session.experts.find(e => e.name === expertName);
    if (existingExpert) {
        currentExpert = existingExpert;
        console.log('üëã –≠–∫—Å–ø–µ—Ä—Ç –≤–µ—Ä–Ω—É–ª—Å—è:', expertName);
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
        currentExpert = {
            id: generateExpertId(),
            name: expertName,
            joinedAt: new Date().toISOString()
        };
        session.experts.push(currentExpert);
        console.log('üëã –ù–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç:', expertName);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        sessions[sessionCode] = session;
        localStorage.setItem('expertSessions', JSON.stringify(sessions));
        
        // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        if (currentSession && currentSession.id === sessionCode) {
            updateExpertsList();
        }
    }
    
    currentSession = session;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    showExpertVoting(session);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞
function showExpertVoting(session) {
    document.getElementById('expertSessionName').textContent = session.name;
    document.getElementById('expertJoin').classList.remove('active');
    document.getElementById('expertVoting').classList.add('active');
    
    const container = document.getElementById('expertVotingContainer');
    
    // –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    container.innerHTML = `
        <div class="voting-interface">
            <h3>üéØ –û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤</h3>
            <p><strong>–°–µ—Å—Å–∏—è:</strong> ${session.name}</p>
            <p><strong>–ú–µ—Ç–æ–¥:</strong> ${getMethodName(session.method)}</p>
            <p><strong>–í–∞—à–µ –∏–º—è:</strong> ${currentExpert.name}</p>
            
            <div class="objects-list">
                <h4>–û—Ü–µ–Ω–∏—Ç–µ –æ–±—ä–µ–∫—Ç—ã (0-10 –±–∞–ª–ª–æ–≤):</h4>
                ${session.objects.map((object, index) => `
                    <div class="object-card">
                        <div class="object-name">${object}</div>
                        <input type="range" class="rating-slider" min="0" max="10" step="1" value="5" 
                               oninput="document.getElementById('rating${index}').textContent = this.value">
                        <div class="rating-display">
                            –û—Ü–µ–Ω–∫–∞: <span id="rating${index}" class="rating-value">5</span>/10
                        </div>
                    </div>
                `).join('')}
            </div>
            
            <button class="btn btn-success" onclick="submitVote()" style="margin-top: 20px;">
                ‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É
            </button>
        </div>
    `;
    
    console.log('üéØ –≠–∫—Å–ø–µ—Ä—Ç –Ω–∞—á–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–º
function submitVote() {
    if (!currentSession || !currentExpert) return;
    
    const session = sessions[currentSession.id];
    const sliders = document.querySelectorAll('.rating-slider');
    const votes = {};
    
    session.objects.forEach((object, index) => {
        votes[object] = parseInt(sliders[index].value) || 0;
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
    session.votes[currentExpert.id] = {
        expert: currentExpert.name,
        votes: votes,
        submittedAt: new Date().toISOString()
    };
    
    sessions[currentSession.id] = session;
    localStorage.setItem('expertSessions', JSON.stringify(sessions));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è
    document.getElementById('expertVoting').classList.remove('active');
    document.getElementById('expertWaiting').classList.add('active');
    
    updateCompletedCount();
    console.log('‚úÖ –û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', votes);
    
    alert('‚úÖ –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö
function updateCompletedCount() {
    if (!currentSession) return;
    
    const session = sessions[currentSession.id];
    if (!session) return;
    
    const completedCount = Object.keys(session.votes).length;
    const totalExperts = session.expertsCount;
    
    document.getElementById('completedCount').textContent = completedCount;
    document.getElementById('totalExpertsCount').textContent = totalExperts;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
function updateExpertsList() {
    if (!currentSession) return;
    
    const session = sessions[currentSession.id];
    if (!session) return;
    
    const container = document.getElementById('connectedExperts');
    const connectedCount = session.experts.length;
    
    document.getElementById('connectedCount').textContent = connectedCount;
    document.getElementById('totalExperts').textContent = session.expertsCount;
    
    if (connectedCount === 0) {
        container.innerHTML = '<div class="empty-state">üë• –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è</div>';
        document.getElementById('startVotingBtn').disabled = true;
    } else {
        container.innerHTML = '';
        session.experts.forEach(expert => {
            const expertElement = document.createElement('div');
            expertElement.className = 'expert-item';
            expertElement.innerHTML = `
                <div class="expert-avatar">${expert.name.charAt(0)}</div>
                <div class="expert-name">${expert.name}</div>
                <div class="expert-status">
                    ${session.votes[expert.id] ? '‚úÖ' : '‚è≥'}
                </div>
            `;
            container.appendChild(expertElement);
        });
        document.getElementById('startVotingBtn').disabled = false;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateSessionCode() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let result = '';
    for (let i = 0; i < 6; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}

function generateExpertId() {
    return 'expert_' + Math.random().toString(36).substr(2, 9);
}

function getMethodName(method) {
    const names = {
        'direct': '–ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (0-10)',
        'ranking': '–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ', 
        'pairwise': '–ü–∞—Ä–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ'
    };
    return names[method] || method;
}

function nextStep(step) {
    document.querySelectorAll('.step').forEach(s => s.classList.remove('active'));
    document.getElementById(`step${step}`).classList.add('active');
}

function showAdminPage() {
    document.getElementById('expertPage').style.display = 'none';
    document.querySelector('.container').style.display = 'block';
}

function showExpertPage() {
    document.querySelector('.container').style.display = 'none';
    document.getElementById('expertPage').style.display = 'block';
    document.getElementById('expertJoin').classList.add('active');
}

function copyLink() {
    const linkInput = document.getElementById('invitationLink');
    linkInput.select();
    document.execCommand('copy');
    
    const btn = event.target;
    btn.textContent = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
    setTimeout(() => btn.textContent = '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 2000);
}

function startVoting() {
    if (!currentSession) return;
    
    const session = sessions[currentSession.id];
    session.status = 'voting';
    localStorage.setItem('expertSessions', JSON.stringify(sessions));
    
    nextStep(3);
    document.getElementById('votingSessionName').textContent = session.name;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    updateVotingProgress();
}

function updateVotingProgress() {
    if (!currentSession) return;
    
    const session = sessions[currentSession.id];
    const container = document.getElementById('votingProgress');
    
    container.innerHTML = session.experts.map(expert => `
        <div class="progress-card ${session.votes[expert.id] ? 'completed' : 'pending'}">
            <div class="expert-name">${expert.name}</div>
            <div class="expert-status">
                <span class="status-badge ${session.votes[expert.id] ? 'status-completed' : 'status-pending'}">
                    ${session.votes[expert.id] ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ' : '‚è≥ –û–∂–∏–¥–∞–µ—Ç'}
                </span>
            </div>
        </div>
    `).join('');
}

function showResults() {
    if (!currentSession) return;
    
    const session = sessions[currentSession.id];
    session.status = 'completed';
    localStorage.setItem('expertSessions', JSON.stringify(sessions));
    
    nextStep(4);
    document.getElementById('resultsSessionName').textContent = session.name;
    
    // –ü—Ä–æ—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const results = calculateResults(session);
    document.getElementById('resultsContainer').innerHTML = `
        <div class="results">
            <h3>üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏</h3>
            <p>–ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫: ${Object.keys(session.votes).length} –∏–∑ ${session.experts.length}</p>
            
            <div class="winner">
                <h3>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${results.winner}</h3>
                <p>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: ${results.scores[results.winner].toFixed(2)}</p>
            </div>
            
            <table class="voting-table">
                <thead>
                    <tr>
                        <th>–û–±—ä–µ–∫—Ç</th>
                        <th>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</th>
                        <th>–ú–µ—Å—Ç–æ</th>
                    </tr>
                </thead>
                <tbody>
                    ${results.ranking.map((object, index) => `
                        <tr>
                            <td>${object}</td>
                            <td>${results.scores[object].toFixed(2)}</td>
                            <td>${index + 1}</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;
}

function calculateResults(session) {
    const scores = {};
    const objects = session.objects;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º scores
    objects.forEach(object => {
        scores[object] = 0;
    });
    
    // –°—É–º–º–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏
    Object.values(session.votes).forEach(vote => {
        objects.forEach(object => {
            scores[object] += vote.votes[object] || 0;
        });
    });
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ
    const expertCount = Object.keys(session.votes).length || 1;
    objects.forEach(object => {
        scores[object] = scores[object] / expertCount;
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –±–∞–ª–ª–æ–≤
    const ranking = objects.sort((a, b) => scores[b] - scores[a]);
    const winner = ranking[0];
    
    return { scores, ranking, winner };
}

function createNewSession() {
    currentSession = null;
    currentExpert = null;
    nextStep(1);
    document.getElementById('sessionName').value = '';
}

function exportResults() {
    alert('üìä –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
}

function leaveSession() {
    currentExpert = null;
    showExpertPage();
    document.getElementById('expertName').value = '';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.onload = initApp;
