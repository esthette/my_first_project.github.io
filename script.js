// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentSession = null;
let sessions = {};
let currentExpert = null;
let checkInterval = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    console.log('üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏ –∏–∑ localStorage
    try {
        const stored = localStorage.getItem('expertSessions');
        sessions = stored ? JSON.parse(stored) : {};
        console.log('üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–µ—Å—Å–∏–π:', Object.keys(sessions).length);
    } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç');
        sessions = {};
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const urlParams = new URLSearchParams(window.location.search);
    const sessionCode = urlParams.get('session');
    
    console.log('üîó Session code –∏–∑ URL:', sessionCode);
    
    if (sessionCode) {
        console.log('üë§ –†–µ–∂–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∞');
        showExpertPage();
        document.getElementById('sessionCode').value = sessionCode;
        
        if (sessions[sessionCode]) {
            console.log('‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ localStorage');
        } else {
            console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É');
        }
    } else {
        console.log('üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞');
        showAdminPage();
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    checkInterval = setInterval(checkForUpdates, 2000);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
function createSession() {
    console.log('üéØ –°–û–ó–î–ê–ù–ò–ï –°–ï–°–°–ò–ò');
    
    const sessionName = document.getElementById('sessionName').value || '–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è';
    const expertsCount = parseInt(document.getElementById('expertsCount').value) || 5;
    const objectsCount = parseInt(document.getElementById('objectsCount').value) || 4;
    const method = document.getElementById('evaluationMethod').value;
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ —Å–µ—Å—Å–∏–∏
    const sessionCode = generateSessionCode();
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    currentSession = {
        id: sessionCode,
        name: sessionName,
        expertsCount: expertsCount,
        objectsCount: objectsCount,
        method: method,
        experts: [],
        votes: {},
        status: 'inviting',
        createdAt: new Date().toISOString(),
        objects: []
    };
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã
    for (let i = 1; i <= objectsCount; i++) {
        currentSession.objects.push(`–û–±—ä–µ–∫—Ç ${i}`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    sessions[sessionCode] = currentSession;
    localStorage.setItem('expertSessions', JSON.stringify(sessions));
    
    console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', currentSession);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º
    showInvitationStep();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —à–∞–≥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
function showInvitationStep() {
    if (!currentSession) {
        alert('–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞');
        return;
    }
    
    document.getElementById('currentSessionName').textContent = currentSession.name;
    document.getElementById('sessionCodeDisplay').textContent = currentSession.id;
    document.getElementById('totalExperts').textContent = currentSession.expertsCount;
    
    // üî• –£–ü–†–û–©–ï–ù–ù–ê–Ø —Å—Å—ã–ª–∫–∞ - –¢–û–õ–¨–ö–û –∫–æ–¥ —Å–µ—Å—Å–∏–∏
    const invitationLink = `${window.location.origin}${window.location.pathname}?session=${currentSession.id}`;
    
    document.getElementById('invitationLink').value = invitationLink;
    
    console.log('üîó –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è QR-–∫–æ–¥–∞:', invitationLink);
    console.log('üìè –î–ª–∏–Ω–∞ —Å—Å—ã–ª–∫–∏:', invitationLink.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –ö–û–†–û–¢–ö–û–ô —Å—Å—ã–ª–∫–∏
    document.getElementById('qrcode').innerHTML = '';
    try {
        new QRCode(document.getElementById('qrcode'), {
            text: invitationLink,
            width: 180,
            height: 180,
            colorDark: "#000000",
            colorLight: "#ffffff",
            correctLevel: QRCode.CorrectLevel.Q
        });
        console.log('‚úÖ QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞:', error);
        showCodeFallback();
    }
    
    nextStep(2);
    updateExpertsList();
}

// –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –ø–æ–∫–∞–∑ –∫–æ–¥–∞ —Å–µ—Å—Å–∏–∏
function showCodeFallback() {
    document.getElementById('qrcode').innerHTML = `
        <div class="session-code-large">
            <div class="code-title">üì± –ö–æ–¥ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞</div>
            <div class="code-value">${currentSession.id}</div>
            <div class="code-instruction">–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤—ã—à–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥</div>
        </div>
    `;
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ –∫ —Å–µ—Å—Å–∏–∏
function joinSession() {
    const expertName = document.getElementById('expertName').value.trim();
    let sessionCode = document.getElementById('sessionCode').value.trim().toUpperCase();
    
    // –ï—Å–ª–∏ –∫–æ–¥ –ø—É—Å—Ç–æ–π, –±–µ—Ä–µ–º –∏–∑ URL
    if (!sessionCode) {
        const urlParams = new URLSearchParams(window.location.search);
        sessionCode = urlParams.get('session');
        if (sessionCode) {
            document.getElementById('sessionCode').value = sessionCode;
        }
    }
    
    if (!expertName) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
        return;
    }
    
    if (!sessionCode) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–µ—Å—Å–∏–∏');
        return;
    }
    
    console.log('üîç –ò—â–µ–º —Å–µ—Å—Å–∏—é –ø–æ –∫–æ–¥—É:', sessionCode);
    
    // üî• –ò—â–µ–º —Å–µ—Å—Å–∏—é –≤ localStorage —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    let session = sessions[sessionCode];
    
    if (!session) {
        console.error('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
        alert('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ!\n\n' +
              '–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.\n\n' +
              '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–∏–¥–∏—Ç –≤–∞—Å –≤ —Å–ø–∏—Å–∫–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.');
        
        // üî• –°–û–ó–î–ê–ï–ú –õ–û–ö–ê–õ–¨–ù–£–Æ –ö–û–ü–ò–Æ –°–ï–°–°–ò–ò
        session = createLocalSession(sessionCode, expertName);
    }
    
    if (!session) {
        alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é');
        return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º/–Ω–∞—Ö–æ–¥–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∞
    const existingExpert = session.experts.find(e => e.name === expertName);
    if (existingExpert) {
        currentExpert = existingExpert;
        console.log('üëã –≠–∫—Å–ø–µ—Ä—Ç –≤–µ—Ä–Ω—É–ª—Å—è:', expertName);
    } else {
        currentExpert = {
            id: generateExpertId(),
            name: expertName,
            joinedAt: new Date().toISOString()
        };
        session.experts.push(currentExpert);
        console.log('üëã –ù–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç:', expertName);
    }
    
    currentSession = session;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –≠–¢–û–ì–û —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    sessions[sessionCode] = session;
    localStorage.setItem('expertSessions', JSON.stringify(sessions));
    
    // üî• –û–ë–ù–û–í–õ–Ø–ï–ú –°–ï–°–°–ò–Æ –ê–î–ú–ò–ù–ê (–µ—Å–ª–∏ –æ–Ω –Ω–∞ —ç—Ç–æ–º –∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ)
    updateAdminSession(sessionCode, session);
    
    console.log('‚úÖ –≠–∫—Å–ø–µ—Ä—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏:', sessionCode);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    showExpertVoting(session);
}

// üî• –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞
function createLocalSession(sessionCode, expertName) {
    console.log('üî® –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞');
    
    // –ë–∞–∑–æ–≤–∞—è —Å–µ—Å—Å–∏—è
    const session = {
        id: sessionCode,
        name: `–°–µ—Å—Å–∏—è ${sessionCode}`,
        expertsCount: 10,
        objectsCount: 4,
        method: 'direct',
        experts: [],
        votes: {},
        status: 'inviting',
        createdAt: new Date().toISOString(),
        objects: ['–û–±—ä–µ–∫—Ç 1', '–û–±—ä–µ–∫—Ç 2', '–û–±—ä–µ–∫—Ç 3', '–û–±—ä–µ–∫—Ç 4']
    };
    
    sessions[sessionCode] = session;
    localStorage.setItem('expertSessions', JSON.stringify(sessions));
    
    console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', session);
    return session;
}

// üî• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –æ–Ω –Ω–∞ —Ç–æ–º –∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ)
function updateAdminSession(sessionCode, expertSession) {
    // –ò—â–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é —Å–µ—Å—Å–∏—é
    for (const code in sessions) {
        const session = sessions[code];
        if (session && session.experts) {
            // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è (–µ—Å—Ç—å expertsCount)
            if (session.expertsCount && session.id === sessionCode) {
                console.log('üîÅ –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é —Å–µ—Å—Å–∏—é');
                
                // –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∞ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é —Å–µ—Å—Å–∏—é
                const expertExists = session.experts.find(e => e.name === currentExpert.name);
                if (!expertExists) {
                    session.experts.push(currentExpert);
                    localStorage.setItem('expertSessions', JSON.stringify(sessions));
                    console.log('‚úÖ –≠–∫—Å–ø–µ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—Å–∫—É—é —Å–µ—Å—Å–∏—é');
                }
                break;
            }
        }
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞
function showExpertVoting(session) {
    document.getElementById('expertSessionName').textContent = session.name;
    document.getElementById('expertJoin').classList.remove('active');
    document.getElementById('expertVoting').classList.add('active');
    
    const container = document.getElementById('expertVotingContainer');
    
    // –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    container.innerHTML = `
        <div class="voting-interface">
            <h3>üéØ –û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤</h3>
            <p><strong>–°–µ—Å—Å–∏—è:</strong> ${session.name}</p>
            <p><strong>–ú–µ—Ç–æ–¥:</strong> ${getMethodName(session.method)}</p>
            <p><strong>–í–∞—à–µ –∏–º—è:</strong> ${currentExpert.name}</p>
            
            <div class="objects-list">
                <h4>–û—Ü–µ–Ω–∏—Ç–µ –æ–±—ä–µ–∫—Ç—ã (0-10 –±–∞–ª–ª–æ–≤):</h4>
                ${session.objects.map((object, index) => `
                    <div class="object-card">
                        <div class="object-name">${object}</div>
                        <input type="range" class="rating-slider" min="0" max="10" step="1" value="5" 
                               oninput="document.getElementById('rating${index}').textContent = this.value">
                        <div class="rating-display">
                            –û—Ü–µ–Ω–∫–∞: <span id="rating${index}" class="rating-value">5</span>/10
                        </div>
                    </div>
                `).join('')}
            </div>
            
            <button class="btn btn-success" onclick="submitVote()" style="margin-top: 20px;">
                ‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É
            </button>
        </div>
    `;
    
    console.log('üéØ –≠–∫—Å–ø–µ—Ä—Ç –Ω–∞—á–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–º
function submitVote() {
    if (!currentSession || !currentExpert) return;
    
    const session = sessions[currentSession.id];
    const sliders = document.querySelectorAll('.rating-slider');
    const votes = {};
    
    session.objects.forEach((object, index) => {
        votes[object] = parseInt(sliders[index].value) || 0;
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
    session.votes[currentExpert.id] = {
        expert: currentExpert.name,
        votes: votes,
        submittedAt: new Date().toISOString()
    };
    
    sessions[currentSession.id] = session;
    localStorage.setItem('expertSessions', JSON.stringify(sessions));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è
    document.getElementById('expertVoting').classList.remove('active');
    document.getElementById('expertWaiting').classList.add('active');
    
    updateCompletedCount();
    console.log('‚úÖ –û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', votes);
    
    alert('‚úÖ –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö
function updateCompletedCount() {
    if (!currentSession) return;
    
    const session = sessions[currentSession.id];
    if (!session) return;
    
    const completedCount = Object.keys(session.votes).length;
    const totalExperts = session.expertsCount;
    
    document.getElementById('completedCount').textContent = completedCount;
    document.getElementById('totalExpertsCount').textContent = totalExperts;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
function updateExpertsList() {
    if (!currentSession) return;
    
    const session = sessions[currentSession.id];
    if (!session) return;
    
    const container = document.getElementById('connectedExperts');
    const connectedCount = session.experts.length;
    
    document.getElementById('connectedCount').textContent = connectedCount;
    document.getElementById('totalExperts').textContent = session.expertsCount;
    
    if (connectedCount === 0) {
        container.innerHTML = '<div class="empty-state">üë• –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è</div>';
        document.getElementById('startVotingBtn').disabled = true;
    } else {
        container.innerHTML = '';
        session.experts.forEach(expert => {
            const expertElement = document.createElement('div');
            expertElement.className = 'expert-item';
            expertElement.innerHTML = `
                <div class="expert-avatar">${expert.name.charAt(0)}</div>
                <div class="expert-name">${expert.name}</div>
                <div class="expert-status">
                    ${session.votes[expert.id] ? '‚úÖ' : '‚è≥'}
                </div>
            `;
            container.appendChild(expertElement);
        });
        document.getElementById('startVotingBtn').disabled = false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
function checkForUpdates() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    try {
        const stored = localStorage.getItem('expertSessions');
        if (stored) {
            const updatedSessions = JSON.parse(stored);
            Object.assign(sessions, updatedSessions);
        }
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (currentSession) {
        const session = sessions[currentSession.id];
        if (session) {
            if (document.getElementById('step2')?.classList.contains('active')) {
                updateExpertsList();
            }
            if (document.getElementById('expertWaiting')?.classList.contains('active')) {
                updateCompletedCount();
            }
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateSessionCode() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let result = '';
    for (let i = 0; i < 6; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}

function generateExpertId() {
    return 'expert_' + Math.random().toString(36).substr(2, 9);
}

function getMethodName(method) {
    const names = {
        'direct': '–ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (0-10)',
        'ranking': '–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ', 
        'pairwise': '–ü–∞—Ä–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ'
    };
    return names[method] || method;
}

function nextStep(step) {
    document.querySelectorAll('.step').forEach(s => s.classList.remove('active'));
    document.getElementById(`step${step}`).classList.add('active');
}

function prevStep(step) {
    document.querySelectorAll('.step').forEach(s => s.classList.remove('active'));
    document.getElementById(`step${step}`).classList.add('active');
}

function showAdminPage() {
    document.getElementById('expertPage').style.display = 'none';
    document.querySelector('.container').style.display = 'block';
}

function showExpertPage() {
    document.querySelector('.container').style.display = 'none';
    document.getElementById('expertPage').style.display = 'block';
    document.getElementById('expertJoin').classList.add('active');
}

function copyLink() {
    const linkInput = document.getElementById('invitationLink');
    linkInput.select();
    document.execCommand('copy');
    
    const btn = event.target;
    btn.textContent = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
    setTimeout(() => btn.textContent = '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 2000);
}

function startVoting() {
    if (!currentSession) return;
    
    const session = sessions[currentSession.id];
    session.status = 'voting';
    localStorage.setItem('expertSessions', JSON.stringify(sessions));
    
    nextStep(3);
    document.getElementById('votingSessionName').textContent = session.name;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    updateVotingProgress();
    
    alert('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –≠–∫—Å–ø–µ—Ä—Ç—ã –º–æ–≥—É—Ç —Ç–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã.');
}

function updateVotingProgress() {
    if (!currentSession) return;
    
    const session = sessions[currentSession.id];
    const container = document.getElementById('votingProgress');
    
    if (!container) return;
    
    container.innerHTML = session.experts.map(expert => `
        <div class="progress-card ${session.votes[expert.id] ? 'completed' : 'pending'}">
            <div class="expert-name">${expert.name}</div>
            <div class="expert-status">
                <span class="status-badge ${session.votes[expert.id] ? 'status-completed' : 'status-pending'}">
                    ${session.votes[expert.id] ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ' : '‚è≥ –û–∂–∏–¥–∞–µ—Ç'}
                </span>
            </div>
        </div>
    `).join('');
    
    // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ
    const completedCount = Object.keys(session.votes).length;
    document.getElementById('showResultsBtn').disabled = completedCount === 0;
}

function showResults() {
    if (!currentSession) return;
    
    const session = sessions[currentSession.id];
    session.status = 'completed';
    localStorage.setItem('expertSessions', JSON.stringify(sessions));
    
    nextStep(4);
    document.getElementById('resultsSessionName').textContent = session.name;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const results = calculateResults(session);
    document.getElementById('resultsContainer').innerHTML = `
        <div class="results">
            <h3>üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏</h3>
            <p>–ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫: ${Object.keys(session.votes).length} –∏–∑ ${session.experts.length}</p>
            
            <div class="winner">
                <h3>üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${results.winner}</h3>
                <p>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: ${results.scores[results.winner].toFixed(2)}</p>
            </div>
            
            <table class="voting-table">
                <thead>
                    <tr>
                        <th>–û–±—ä–µ–∫—Ç</th>
                        <th>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</th>
                        <th>–ú–µ—Å—Ç–æ</th>
                    </tr>
                </thead>
                <tbody>
                    ${results.ranking.map((object, index) => `
                        <tr>
                            <td>${object}</td>
                            <td>${results.scores[object].toFixed(2)}</td>
                            <td>${index + 1}</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;
}

function calculateResults(session) {
    const scores = {};
    const objects = session.objects;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º scores
    objects.forEach(object => {
        scores[object] = 0;
    });
    
    // –°—É–º–º–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏
    Object.values(session.votes).forEach(vote => {
        objects.forEach(object => {
            scores[object] += vote.votes[object] || 0;
        });
    });
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ
    const expertCount = Object.keys(session.votes).length || 1;
    objects.forEach(object => {
        scores[object] = scores[object] / expertCount;
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –±–∞–ª–ª–æ–≤
    const ranking = objects.sort((a, b) => scores[b] - scores[a]);
    const winner = ranking[0];
    
    return { scores, ranking, winner };
}

function createNewSession() {
    currentSession = null;
    currentExpert = null;
    nextStep(1);
    document.getElementById('sessionName').value = '';
}

function exportResults() {
    alert('üìä –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
}

function leaveSession() {
    currentExpert = null;
    showExpertPage();
    document.getElementById('expertName').value = '';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.onload = initApp;

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', function() {
    if (checkInterval) {
        clearInterval(checkInterval);
    }
});
