// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ - —Ö—Ä–∞–Ω–∏–º –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
window.expertSessions = window.expertSessions || {};
let currentSession = null;
let currentExpert = null;
let checkInterval = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    console.log('üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø');
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å window –æ–±—ä–µ–∫—Ç–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏)
    if (window.expertSessions) {
        sessions = window.expertSessions;
    }
    
    // –î—É–±–ª–∏—Ä—É–µ–º –≤ localStorage –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    try {
        const stored = localStorage.getItem('expertSessions');
        if (stored) {
            const parsed = JSON.parse(stored);
            Object.assign(sessions, parsed);
        }
    } catch (error) {
        console.log('‚ö†Ô∏è localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const urlParams = new URLSearchParams(window.location.search);
    const sessionCode = urlParams.get('session');
    
    console.log('üîó Session code –∏–∑ URL:', sessionCode);
    console.log('üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', Object.keys(sessions));
    
    if (sessionCode) {
        console.log('üë§ –†–µ–∂–∏–º —ç–∫—Å–ø–µ—Ä—Ç–∞');
        showExpertPage();
        document.getElementById('sessionCode').value = sessionCode;
        
        if (sessions[sessionCode]) {
            console.log('‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞:', sessions[sessionCode]);
        } else {
            console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ:', Object.keys(sessions));
        }
    } else {
        console.log('üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞');
        showAdminPage();
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    checkInterval = setInterval(syncSessions, 1000);
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
function syncSessions() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ window (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
    if (window.expertSessions) {
        Object.assign(sessions, window.expertSessions);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ localStorage
    try {
        const stored = localStorage.getItem('expertSessions');
        if (stored) {
            const parsed = JSON.parse(stored);
            Object.assign(sessions, parsed);
        }
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ localStorage
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ window –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫
    window.expertSessions = sessions;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (currentSession && document.getElementById('step2')?.classList.contains('active')) {
        updateExpertsList();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
function createSession() {
    console.log('üéØ –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –°–ï–°–°–ò–ò');
    
    const sessionName = document.getElementById('sessionName').value || '–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è';
    const expertsCount = parseInt(document.getElementById('expertsCount').value) || 5;
    const objectsCount = parseInt(document.getElementById('objectsCount').value) || 4;
    const method = document.getElementById('evaluationMethod').value;
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ —Å–µ—Å—Å–∏–∏
    const sessionCode = generateSessionCode();
    console.log('üÜï –ö–æ–¥ —Å–µ—Å—Å–∏–∏:', sessionCode);
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
    currentSession = {
        id: sessionCode,
        name: sessionName,
        expertsCount: expertsCount,
        objectsCount: objectsCount,
        method: method,
        experts: [],
        votes: {},
        status: 'inviting',
        createdAt: new Date().toISOString(),
        objects: []
    };
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã
    for (let i = 1; i <= objectsCount; i++) {
        currentSession.objects.push(`–û–±—ä–µ–∫—Ç ${i}`);
    }
    
    console.log('üìù –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è:', currentSession);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–û –í–°–ï –•–†–ê–ù–ò–õ–ò–©–ê
    sessions[sessionCode] = currentSession;
    
    // 1. –í window (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è) - —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏
    window.expertSessions = sessions;
    
    // 2. –í localStorage
    try {
        localStorage.setItem('expertSessions', JSON.stringify(sessions));
        console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ localStorage');
    } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage');
    }
    
    // 3. –í sessionStorage
    try {
        sessionStorage.setItem('expertSessions', JSON.stringify(sessions));
        console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ sessionStorage');
    } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ sessionStorage');
    }
    
    console.log('üíæ –ò—Ç–æ–≥–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏:', sessions);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º
    showInvitationStep();
    console.log('üéâ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
}

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ –∫ —Å–µ—Å—Å–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
function joinSession() {
    const expertName = document.getElementById('expertName').value.trim();
    let sessionCode = document.getElementById('sessionCode').value.trim().toUpperCase();
    
    // –ï—Å–ª–∏ –∫–æ–¥ –ø—É—Å—Ç–æ–π, –±–µ—Ä–µ–º –∏–∑ URL
    if (!sessionCode) {
        const urlParams = new URLSearchParams(window.location.search);
        sessionCode = urlParams.get('session');
        if (sessionCode) {
            document.getElementById('sessionCode').value = sessionCode;
        }
    }
    
    if (!expertName) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
        return;
    }
    
    if (!sessionCode) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–µ—Å—Å–∏–∏');
        return;
    }
    
    console.log('üîç –ò—â–µ–º —Å–µ—Å—Å–∏—é:', sessionCode);
    console.log('üìÇ –í—Å–µ —Å–µ—Å—Å–∏–∏:', sessions);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
    syncSessions();
    
    const session = sessions[sessionCode];
    
    if (!session) {
        console.error('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ:', Object.keys(sessions));
        alert('–°–µ—Å—Å–∏—è —Å –∫–æ–¥–æ–º ' + sessionCode + ' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:' +
              '\n1. –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –∑–∞–Ω–æ–≤–æ' +
              '\n2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É' +
              '\n3. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ —É–∂–µ —ç–∫—Å–ø–µ—Ä—Ç
    const existingExpert = session.experts.find(e => e.name === expertName);
    if (existingExpert) {
        currentExpert = existingExpert;
        console.log('üëã –≠–∫—Å–ø–µ—Ä—Ç –≤–µ—Ä–Ω—É–ª—Å—è:', expertName);
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
        currentExpert = {
            id: generateExpertId(),
            name: expertName,
            joinedAt: new Date().toISOString()
        };
        session.experts.push(currentExpert);
        console.log('üëã –ù–æ–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç:', expertName);
    }
    
    currentSession = session;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    saveSessions();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    showExpertVoting(session);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –≤–æ –≤—Å–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
function saveSessions() {
    // 1. Window
    window.expertSessions = sessions;
    
    // 2. LocalStorage
    try {
        localStorage.setItem('expertSessions', JSON.stringify(sessions));
    } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ localStorage');
    }
    
    // 3. SessionStorage
    try {
        sessionStorage.setItem('expertSessions', JSON.stringify(sessions));
    } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ sessionStorage');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞
function showExpertVoting(session) {
    document.getElementById('expertSessionName').textContent = session.name;
    document.getElementById('expertJoin').classList.remove('active');
    document.getElementById('expertVoting').classList.add('active');
    
    const container = document.getElementById('expertVotingContainer');
    container.innerHTML = '<div class="voting-interface"></div>';
    
    const votingInterface = container.querySelector('.voting-interface');
    
    // –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∞
    votingInterface.innerHTML = `
        <h3>–û—Ü–µ–Ω–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤</h3>
        <p>–°–µ—Å—Å–∏—è: <strong>${session.name}</strong></p>
        <p>–ú–µ—Ç–æ–¥: <strong>${getMethodName(session.method)}</strong></p>
        
        <div class="test-voting">
            <h4>–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è</h4>
            ${session.objects.map(object => `
                <div class="object-card">
                    <label>${object}:</label>
                    <input type="number" min="0" max="10" value="5" class="rating-input">
                </div>
            `).join('')}
        </div>
        
        <p><small>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ.</small></p>
    `;
    
    console.log('üéØ –≠–∫—Å–ø–µ—Ä—Ç –Ω–∞—á–∞–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–º
function submitVote() {
    if (!currentSession || !currentExpert) return;
    
    const session = sessions[currentSession.id];
    const inputs = document.querySelectorAll('.rating-input');
    const votes = {};
    
    session.objects.forEach((object, index) => {
        votes[object] = parseFloat(inputs[index].value) || 0;
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
    session.votes[currentExpert.id] = {
        expert: currentExpert.name,
        votes: votes,
        submittedAt: new Date().toISOString()
    };
    
    saveSessions();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∂–∏–¥–∞–Ω–∏—è
    document.getElementById('expertVoting').classList.remove('active');
    document.getElementById('expertWaiting').classList.add('active');
    
    updateCompletedCount();
    console.log('‚úÖ –û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', votes);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö
function updateCompletedCount() {
    if (!currentSession) return;
    
    const session = sessions[currentSession.id];
    const completedCount = Object.keys(session.votes).length;
    const totalExperts = session.expertsCount;
    
    document.getElementById('completedCount').textContent = completedCount;
    document.getElementById('totalExpertsCount').textContent = totalExperts;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateSessionCode() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let result = '';
    for (let i = 0; i < 6; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}

function generateExpertId() {
    return 'expert_' + Math.random().toString(36).substr(2, 9);
}

function getMethodName(method) {
    const names = {
        'direct': '–ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞',
        'ranking': '–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ', 
        'pairwise': '–ü–∞—Ä–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ'
    };
    return names[method] || method;
}

function nextStep(step) {
    document.querySelectorAll('.step').forEach(s => s.classList.remove('active'));
    document.getElementById(`step${step}`).classList.add('active');
}

function showAdminPage() {
    document.getElementById('expertPage').style.display = 'none';
    document.querySelector('.container').style.display = 'block';
}

function showExpertPage() {
    document.querySelector('.container').style.display = 'none';
    document.getElementById('expertPage').style.display = 'block';
    document.getElementById('expertJoin').classList.add('active');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
function updateExpertsList() {
    if (!currentSession) return;
    
    const session = sessions[currentSession.id];
    if (!session) return;
    
    const container = document.getElementById('connectedExperts');
    const connectedCount = session.experts.length;
    
    document.getElementById('connectedCount').textContent = connectedCount;
    document.getElementById('totalExperts').textContent = session.expertsCount;
    
    if (connectedCount === 0) {
        container.innerHTML = '<div class="empty-state">–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è</div>';
        document.getElementById('startVotingBtn').disabled = true;
    } else {
        container.innerHTML = '';
        session.experts.forEach(expert => {
            const expertElement = document.createElement('div');
            expertElement.className = 'expert-item';
            expertElement.innerHTML = `
                <div class="expert-avatar">${expert.name.charAt(0)}</div>
                <div class="expert-name">${expert.name}</div>
            `;
            container.appendChild(expertElement);
        });
        document.getElementById('startVotingBtn').disabled = false;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —à–∞–≥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
function showInvitationStep() {
    if (!currentSession) {
        alert('–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞');
        return;
    }
    
    document.getElementById('currentSessionName').textContent = currentSession.name;
    document.getElementById('sessionCodeDisplay').textContent = currentSession.id;
    document.getElementById('totalExperts').textContent = currentSession.expertsCount;
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
    const invitationLink = `${window.location.origin}${window.location.pathname}?session=${currentSession.id}`;
    document.getElementById('invitationLink').value = invitationLink;
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
    document.getElementById('qrcode').innerHTML = '';
    new QRCode(document.getElementById('qrcode'), {
        text: invitationLink,
        width: 200,
        height: 200,
        colorDark: "#000000",
        colorLight: "#ffffff",
        correctLevel: QRCode.CorrectLevel.H
    });
    
    nextStep(2);
    updateExpertsList();
}

function copyLink() {
    const linkInput = document.getElementById('invitationLink');
    linkInput.select();
    document.execCommand('copy');
    alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
}

function startVoting() {
    if (!currentSession) return;
    
    const session = sessions[currentSession.id];
    session.status = 'voting';
    saveSessions();
    
    nextStep(3);
    document.getElementById('votingSessionName').textContent = session.name;
    alert('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!');
}

function showResults() {
    if (!currentSession) return;
    
    const session = sessions[currentSession.id];
    session.status = 'completed';
    saveSessions();
    
    nextStep(4);
    document.getElementById('resultsSessionName').textContent = session.name;
    
    document.getElementById('resultsContainer').innerHTML = `
        <div class="results-placeholder">
            <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏</h3>
            <p>–ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫: ${Object.keys(session.votes).length} –∏–∑ ${session.experts.length}</p>
            <div class="winner">
                <h3>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! üéâ</h3>
                <p>–≠–∫—Å–ø–µ—Ä—Ç—ã –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∏ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å</p>
            </div>
        </div>
    `;
}

function createNewSession() {
    currentSession = null;
    currentExpert = null;
    document.querySelectorAll('.step').forEach(s => s.classList.remove('active'));
    document.getElementById('step1').classList.add('active');
    document.getElementById('sessionName').value = '';
}

function exportResults() {
    alert('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

function leaveSession() {
    currentExpert = null;
    showExpertPage();
    document.getElementById('expertName').value = '';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.onload = initApp;
window.addEventListener('beforeunload', function() {
    if (checkInterval) clearInterval(checkInterval);
});
